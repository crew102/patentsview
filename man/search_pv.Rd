% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/search-pv.R
\name{search_pv}
\alias{search_pv}
\title{Search PatentsView data}
\usage{
search_pv(query, fields = NULL, endpoint = "patents", subent_cnts = FALSE,
  mtchd_subent_only = TRUE, page = 1, per_page = 25, all_pages = FALSE,
  sort = NULL, method = "GET", error_browser = getOption("browser"), ...)
}
\arguments{
\item{query}{The query that the API will use to filter records. This paramater can be any one of the following:
\itemize{
 \item A character or JSON vector of length 1 with valid JSON syntax\cr E.g., \code{'{"_gte":{"patent_date":"2007-01-04"}}'}
 \item A list which will be converted to JSON\cr E.g., \code{list("_gte" = list("patent_date" = "2007-01-04"))}
 \item An object of class \code{pv_query}, which you create by calling one of the functions found in the \code{\link{qry_funs}} list...See the \href{https://github.com/crew102/patentsview/blob/master/vignettes/writing-queries.Rmd}{writing queries vignette} for details.\cr E.g., \code{qry_funs$gte(patent_date = "2007-01-04")}
}}

\item{fields}{A character vector of fields that you want returned from the server. A value of \code{NULL} indicates that the default fields should be returned. Acceptable field values for a given endpoint can be found at the API's online documentation (e.g., see the field list for \href{http://www.patentsview.org/api/patent.html#field_list}{patents endpoint})...Note, you can use \code{\link{get_fields}} to quickly get possible field names for a given endpoint.}

\item{endpoint}{A character vector of length 1 indicating which web service resource you wish to search. \code{endpoint} must be one of the following: "patents", "inventors", "assignees", "locations", "cpc_subsections", "uspc_mainclasses", "nber_subcategories".}

\item{subent_cnts}{Do you want the total counts of unique subentities to be returned to you? This is equivlient to the \code{include_subentity_total_counts} parameter found \href{http://www.patentsview.org/api/query-language.html#options_parameter}{here}.}

\item{mtchd_subent_only}{Do you want only the subentities that match your query to be returned to you? A value of \code{TRUE} means the subentity has to meet the query criterion in order for it to be returned, while a value of \code{FALSE} indicates that all subentity data will be returned, even those records that don't meet the query criterion. This is equivlient to the \code{matched_subentities_only} parameter found \href{http://www.patentsview.org/api/query-language.html#options_parameter}{here}.}

\item{page}{The page number of the results that you want returned.}

\item{per_page}{The number of records that should be returned per page. This value can be as high as 10,000 (e.g., \code{per_page = 10000}).}

\item{all_pages}{Do you want to download all possible pages of output? If \code{all_pages = TRUE}, the values of \code{page} and \code{per_page} are ignored.}

\item{sort}{A named character vector where the name indicates the field to sort by and the value indicates the direction of sorting ("asc" or "desc"). For example, \code{sort = c("patent_number" = "asc")} or\cr\code{sort = c("patent_number" = "asc", "patent_date" = "desc")}. \code{sort = NULL} (the default) means do not sort the results. You must include any fields that you are sorting by in the \code{fields} vector.}

\item{method}{A character vector of length 1 indicating the HTTP method that you want to use to send the request. Possible values include \code{"GET"} or \code{"POST"}. \strong{Use the POST method when your query is very long (say, over 2,000 characters in length)}.}

\item{error_browser}{The program used to view any HTML error messages sent by the API. This should be either a character vector of length 1 giving the name of the program (e.g., \code{error_browser = "chrome"}) assuming it is on your PATH, or the full path to the program if it is not on your PATH. Alternatively, you can provide an R function to be called to invoke the error browser (e.g., \code{error_browser = rstudioapi::viewer}). Under Windows, \code{NULL} is also an allowed value for \code{error_browser} (and is the default), and implies that the file association mechanism will be used to determine which browser is used. To turn error browsing off on Windows, set \code{error_browser = "false"}.}

\item{...}{Arguments passed along to httr's \code{\link[httr]{GET}} or \code{\link[httr]{POST}} function.}
}
\value{
A list with the following three elements:
\describe{
  \item{data}{A list with one element - a named data frame containing the data returned by the server. Each row in the data frame corresponds to a single primary entity. For example, if you search the assignee endpoint, then the data frame will be on the assignee-level, where each row corresponds to a single assignee. Fields that are not on the assignee-level for this result set will be returned in a list column.}
  \item{query_results}{Entity counts across all pages of output (not just the page returned to you). If you set \code{subent_cnts = TRUE}, you will be returned both the counts of the primary entities and subentities that are returned by your search.}
  \item{request}{Details of the HTTP request that was sent to the server. When you set \code{all_pages = TRUE}, you will only get a sample request. In other words, you will not be given multiple requests for the multiple calls made to the server (one for each page of results).}
 }
}
\description{
This function makes an HTTP request to the PatentsView API for data matching the users query.
}
\examples{

search_pv(query = qry_funs$gt(patent_year = 2010))

search_pv(query = '{"_gt":{"patent_year":2010}}',
          method = "POST", fields = "patent_number",
          sort = c("patent_number" = "asc"))

search_pv(query = qry_funs$contains(inventor_last_name = "smith"),
          endpoint = "assignees",
          fields = get_fields("assignees", c("assignees", "patents")))
}

